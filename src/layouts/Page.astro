---
import { getSidebar } from '@astrojs/starlight/utils/navigation'
import type { MarkdownHeading } from 'astro'
import config from 'virtual:starlight/user-config'

// Built-in CSS styles.
import '@astrojs/starlight/style/props.css'
import '@astrojs/starlight/style/reset.css'
import '@astrojs/starlight/style/shiki.css'
import '@astrojs/starlight/style/util.css'

// Components â€” can override built-in CSS, but not user CSS.
import ContentPanel from '@astrojs/starlight/components/ContentPanel.astro'
import FallbackContentNotice from '@astrojs/starlight/components/FallbackContentNotice.astro'
import Footer from '@astrojs/starlight/components/Footer.astro'
import Header from '@astrojs/starlight/components/Header.astro'
import MarkdownContent from '@astrojs/starlight/components/MarkdownContent.astro'
import RightSidebar from '@astrojs/starlight/components/RightSidebar.astro'
import Sidebar from '@astrojs/starlight/components/Sidebar.astro'
import SkipLink from '@astrojs/starlight/components/SkipLink.astro'
import ThemeProvider from '@astrojs/starlight/components/ThemeProvider.astro'
import PageFrame from '@astrojs/starlight/layout/PageFrame.astro'
import TwoColumnContent from '@astrojs/starlight/layout/TwoColumnContent.astro'

import MarkdownMeta from '../components/MarkdownMeta.astro'

// Remark component CSS (needs to override `MarkdownContent.astro`)
import '@astrojs/starlight/style/asides.css'

// Important that this is the last import so it can override built-in styles.
import type { LocaleData } from '@astrojs/starlight/utils/slugs'
import 'virtual:starlight/user-css'
import HeadSEO from '../components/HeadSEO.astro'
import Hero from '../components/Hero.astro'
import type { StarlightData } from '../starlight/schemas/starlight'

interface Props {
  entry: {
    id: string
    data: StarlightData
  }
  localeData: LocaleData
  slug: string
  isFallback?: true

  headings: MarkdownHeading[]
  /** Which frontmatter properties should be rendered in the page */
  metaProperties: Array<{ key: string; header?: string }>
}

const { dir, entry, entryMeta, headings, isFallback } = Astro.props
const sidebar = getSidebar(Astro.url.pathname, entryMeta.locale)

const hasSidebar = entry.data.template !== 'splash'
const tocConfig = !hasSidebar
  ? false
  : entry.data.tableOfContents !== undefined
  ? entry.data.tableOfContents
  : config.tableOfContents
const hasToC = Boolean(tocConfig)
const hasHero = Boolean(entry.data.hero)
---

<html
  {entryMeta.lang}
  {entryMeta.dir}
  data-has-toc={hasToC}
  data-has-sidebar={hasSidebar}
  data-has-hero={hasHero}
>
  <head>
    <HeadSEO data={entry.data} lang={entryMeta.lang} />
    <style>
      html:not([data-has-toc]) {
        --sl-mobile-toc-height: 0rem;
      }
      html:not([data-has-sidebar]) {
        --sl-content-width: 67.5rem;
      }
      /* Add scroll padding to ensure anchor headings aren't obscured by nav */
      html {
        /* Additional padding is needed to account for the mobile TOC */
        scroll-padding-top: calc(
          1.5rem + var(--sl-nav-height) + var(--sl-mobile-toc-height)
        );
      }
      main {
        padding-bottom: 3vh;
      }
      @media (min-width: 50em) {
        [data-has-sidebar] {
          --sl-content-inline-start: var(--sl-sidebar-width);
        }
      }
      @media (min-width: 72em) {
        html {
          scroll-padding-top: calc(1.5rem + var(--sl-nav-height));
        }
      }
    </style>
  </head>
  <body>
    <ThemeProvider />
    <SkipLink locale={entryMeta.locale} />
    <PageFrame locale={entryMeta.locale} hasSidebar={hasSidebar}>
      <Header slot="header" locale={entryMeta.locale} />
      {
        hasSidebar && (
          <Sidebar slot="sidebar" sidebar={sidebar} locale={entryMeta.locale} />
        )
      }
      <TwoColumnContent {hasToC}>
        <RightSidebar
          slot="right-sidebar"
          headings={headings}
          locale={entryMeta.locale}
          {tocConfig}
        />
        <main
          data-pagefind-body={entry.slug !== '404'}
          lang={entryMeta.lang}
          dir={entryMeta.dir}
        >
          {/* TODO: Revisit how this logic flows. */}
          {
            entry.data.hero ? (
              <ContentPanel>
                <Hero hero={entry.data.hero} fallbackTitle={entry.data.title} />
                <MarkdownContent>
                  <MarkdownMeta entryMeta={{}} metaProperties={[]} />
                  <slot />
                </MarkdownContent>
              </ContentPanel>
            ) : (
              <>
                <ContentPanel>
                  <h1
                    id="_top"
                    data-page-title
                    style="font-size: var(--sl-text-h1); line-height: var(--sl-line-height-headings); font-weight: 600; color: var(--sl-color-white); margin-top: 1rem;"
                  >
                    {entry.data.title}
                  </h1>
                  {isFallback && (
                    <FallbackContentNotice locale={entryMeta.locale} />
                  )}
                </ContentPanel>
                <ContentPanel>
                  <MarkdownContent>
                    <MarkdownMeta entryMeta={{}} metaProperties={[]} />
                    <slot />
                  </MarkdownContent>
                  <Footer {...{ entry, dir, lang, locale, sidebar }} />
                </ContentPanel>
              </>
            )
          }
        </main>
      </TwoColumnContent>
    </PageFrame>
  </body>
</html>
